from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from threading import Timer
import pandas as pd
import spacy
from nltk.stem.snowball import SnowballStemmer
import string
import random

nlp_spacy = spacy.load("ru_core_news_sm")
stemmer = SnowballStemmer("russian")

TOKEN = '–ó–¥–µ—Å—å –≤–∞—à TOKEN'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

df = pd.read_csv('products.csv')
stem_products_key = [stemmer.stem(word) for word in df['name'].values]
stem_products_value = df['name'].values.tolist()
stem_products = dict(zip(stem_products_key, stem_products_value))
customers = {}
orders = []

class BotStates(StatesGroup):
    start_state = State()
    waiting_state = State()
    buying_state = State()
    adding_state = State()
    confirm_state = State()
    choosing_state = State()
    waiting_for_name_state = State()
    waiting_for_telephone_state = State()
    waiting_for_address_state = State()
    second_confirm_state = State()
    canceling_state = State()
    confirm_canceling_state = State()
    end_state = State()


class Customer:
    def __init__(self, id):
        self.id = id
        self.cur_product = None
        self.cur_quantity = None
        self.shopping_cart = []
        self.name = None
        self.telephone = None
        self.address = None
        self.order = None


def lemmatizing(corpus):
    doc = nlp_spacy(corpus.lower())
    return [token.lemma_ for token in doc if not token.text in string.punctuation]

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    global customers
    customers[message.from_user.id] = Customer(message.from_user.id)
    answer = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–Ω–ª–∞–π–Ω-—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Çüéâüéâüéâ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id, answer, reply_markup=keyboard)
    await BotStates.waiting_state.set()

@dp.message_handler()
async def reply(message: types.Message):
    answer = '–í–≤–µ–¥–∏—Ç–µ /start'
    await bot.send_message(message.from_user.id, answer)

@dp.message_handler(state=BotStates.end_state)
async def reply(message: types.Message):
    if message.text != '/start':
        answer = '–í–≤–µ–¥–∏—Ç–µ /start'
        await bot.send_message(message.from_user.id, answer)
        return
    global customers
    customers[message.from_user.id] = Customer(message.from_user.id)
    answer = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–Ω–ª–∞–π–Ω-—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Çüéâüéâüéâ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id, answer, reply_markup=keyboard)
    await BotStates.waiting_state.set()
    

@dp.message_handler(state=BotStates.waiting_state)
async def choose_type(message: types.Message):
    if message.text == '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑':
        answer = 'OK. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–ú—è—Å–æ', '–û–≤–æ—â–∏', '–§—Ä—É–∫—Ç—ã', '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é', '–û—Ç–º–µ–Ω–∏—Ç—å']
        keyboard.add(*buttons)
        await bot.send_message(message.from_user.id, answer, reply_markup=keyboard)
        await BotStates.buying_state.set()
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
        answer = '–ú—ã –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–∏—á–∏–Ω–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–ù–∞–∑–∞–¥']
        keyboard.add(*buttons)
        await bot.send_message(message.from_user.id, answer, reply_markup=keyboard)
        await BotStates.canceling_state.set()

@dp.message_handler(state=BotStates.canceling_state)
async def check_order_number(message: types.Message):
    id = message.from_user.id
    if message.text == '–ù–∞–∑–∞–¥':
        answer = '–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
        keyboard.add(*buttons)
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.waiting_state.set()
    else:
        for order in orders:
            if message.text == order[0]:
                answer = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?\n'
                total = 0
                for product in order[4]:
                    answer += f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[0]}  –¶–µ–Ω–∞ –∑–∞ 1 –∫–≥: {product[1]}  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}  –°—É–º–º–∞: {product[3]}\n'
                    total += product[3]
                answer += f'–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}\n'
                customers[id].order = order
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                buttons = ['–î–∞', '–ù–µ—Ç']
                keyboard.add(*buttons)
                await bot.send_message(id, answer, reply_markup=keyboard)
                await BotStates.confirm_canceling_state.set()
                return
        answer = '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.'
        await bot.send_message(id, answer)

@dp.message_handler(state=BotStates.confirm_canceling_state)
async def confirm(message: types.Message):
    text = lemmatizing(message.text)
    id = message.from_user.id
    if '–Ω–µ—Ç' in text or '–Ω–µ' in text:
        customers[id].order = None
        answer = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–ù–∞–∑–∞–¥']
        keyboard.add(*buttons)
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.canceling_state.set()
    elif '–¥–∞' in text:
        global orders
        for item in customers[id].order[4][:]:
            df_product = df[df['name'] == item[0]]
            inventory = df_product['inventory'].tolist()[0]
            idx = df_product.index[0]
            df.loc[idx, 'inventory'] = inventory + item[2]
        orders.remove(customers[id].order)
        answer = '–ó–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –≤–∞–º –µ—â—ë –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–±—ã, –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ \start . –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'
        keyboard = types.ReplyKeyboardRemove()
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.end_state.set()
    else:
        answer = '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å.'
        await bot.send_message(id, answer)

def word2num(word):
    try:
        return float(word)
    except:
        return None

def get_shopping_cart(id):
    res = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n'
    total = 0
    for product in customers[id].shopping_cart:
        res += f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[0]}  –¶–µ–Ω–∞ –∑–∞ 1 –∫–≥: {product[1]}  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}  –°—É–º–º–∞: {product[3]}\n'
        total += product[3]
    res += f'–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}\n'
    return res

@dp.message_handler(state=BotStates.buying_state)
async def buy(message: types.Message):
    msg = message.text
    id = message.from_user.id
    global df
    if msg == '–ú—è—Å–æ' or msg == '–û–≤–æ—â–∏' or msg == '–§—Ä—É–∫—Ç—ã' or msg == '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã':
        products = df[df['category'] == msg].values
        answer = f'–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {msg.lower()}? –£ –Ω–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n'
        for product in products:
            answer += f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[0]}  –¶–µ–Ω–∞: {product[1]}‚ÇΩ/–∫–≥  –í –Ω–∞–ª–∏—á–∏–∏: {product[3]}–∫–≥\n'
        await bot.send_message(id, answer)
        return
    if msg == '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é':
        if len(customers[id].shopping_cart) == 0:
            answer = '–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏!'
            await bot.send_message(id, answer)
            return
        else:
            answer = get_shopping_cart(id)
            answer += '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?'
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '–•–æ—á—É —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', '–ù–∞–∑–∞–¥']
            keyboard.add(*buttons)
            await bot.send_message(id, answer, reply_markup=keyboard)
            await BotStates.confirm_state.set()
            return
    if msg == '–û—Ç–º–µ–Ω–∏—Ç—å':
        for item in customers[id].shopping_cart[:]:
            df_product = df[df['name'] == item[0]]
            inventory = df_product['inventory'].tolist()[0]
            idx = df_product.index[0]
            df.loc[idx, 'inventory'] = inventory + item[2]
            customers[id].shopping_cart.remove(item)
        answer = '–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
        keyboard.add(*buttons)
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.waiting_state.set()
        return
    text = lemmatizing(msg)
    products = []
    for word in text:
        if word in df['name'].values:
            products.append(word)
        elif stemmer.stem(word) in stem_products:
            products.append(stem_products[stemmer.stem(word)])
    quantity = [float(word) for word in text if word2num(word) != None]
    while len(quantity) < len(products):
        quantity.append(None)
    weight = []
    for word in text:
        if word == '–∫–≥' or word == '–∫–≥.' or word == '–∫–∏–ª–æ–≥—Ä–∞–º–º' or word == '–≥' or word == '–≥.' or word == '–≥—Ä–∞–º–º':
            weight.append(word)
    while len(weight) < len(quantity):
        weight.append('–∫–≥')
    if len(products) == 0:
        # lemmatizing('–µ—Å—Ç—å') => –±—ã—Ç—å
        if '–±—ã—Ç—å' in text or '—á—Ç–æ' in text or '–∫–∞–∫–æ–π' in text:
            df_products = df.values
            answer = f'–£ –Ω–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n'
            for product in df_products:
                answer += f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[0]}  –¶–µ–Ω–∞: {product[1]}‚ÇΩ/–∫–≥  –í –Ω–∞–ª–∏—á–∏–∏: {product[3]}–∫–≥\n'
            await bot.send_message(id, answer)
            return
        else:
            answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞üò•'
            await bot.send_message(id, answer)
            return
    customers[id].cur_product = products[0]
    df_product = df[df['name'] == products[0]]
    inventory = df_product['inventory'].tolist()[0]
    price = df_product['price'].tolist()[0]
    if inventory == 0:
        answer = '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø—Ä–æ–¥–∞–ΩüòÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫—É–ø–∏—Ç—å –∑–∞–≤—Ç—Ä–∞.'
        await bot.send_message(id, answer)
        return
    if quantity[0] != None:
        if weight[0] == '–≥' or weight[0] == '–≥.' or weight[0] == '–≥—Ä–∞–º–º':
            quantity[0] /= 1000
        customers[id].cur_quantity = quantity[0]
        answer = f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {products[0]}({price}‚ÇΩ/–∫–≥) –≤–µ—Å–æ–º {quantity[0]} –∫–≥, –≤–µ—Ä–Ω–æ?'
    else:
        answer = f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {products[0]}({price}‚ÇΩ/–∫–≥)?'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–î–∞', '–ù–µ—Ç']
    keyboard.add(*buttons)
    await bot.send_message(id, answer, reply_markup=keyboard)
    await BotStates.adding_state.set()

@dp.message_handler(state=BotStates.adding_state)
async def add_product(message: types.Message):
    text = lemmatizing(message.text)
    id = message.from_user.id
    global df
    df_product = df[df['name'] == customers[id].cur_product]
    inventory = df_product['inventory'].tolist()[0]
    idx = df_product.index[0]
    if '–≤–µ—Å—å' in text or '–≤—Å—è' in text or '–≤—Å—ë' in text or '–≤—Å–µ' in text:
        customers[id].cur_quantity = inventory
        answer = f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –≤—Å–µ {customers[id].cur_product} (–≤–µ—Å–æ–º {customers[id].cur_quantity} –∫–≥), –≤–µ—Ä–Ω–æ?'
        await bot.send_message(id, answer)
        return
    quantity = [float(word) for word in text if word2num(word) != None]
    if len(quantity) != 0:
        customers[id].cur_quantity = quantity[0]
        answer = f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {customers[id].cur_product} –≤–µ—Å–æ–º {customers[id].cur_quantity} –∫–≥, –≤–µ—Ä–Ω–æ?'
        await bot.send_message(id, answer)
    elif '–Ω–µ—Ç' in text or '–Ω–µ' in text:
        if customers[id].cur_quantity == None:
            answer = '–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å?'
            customers[id].cur_product = None
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ['–ú—è—Å–æ', '–û–≤–æ—â–∏', '–§—Ä—É–∫—Ç—ã', '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é', '–û—Ç–º–µ–Ω–∏—Ç—å']
            keyboard.add(*buttons)
            await bot.send_message(id, answer, reply_markup=keyboard)
            await BotStates.buying_state.set()
        else:
            customers[id].cur_quantity = None
            answer = '–≠—Ç–æ —Ç–æ—Ç —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?'
            await bot.send_message(id, answer)
    elif '–¥–∞' in text:
        if customers[id].cur_quantity == None:
            answer = '–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?'
            await bot.send_message(id, answer)
        else:
            if customers[id].cur_quantity <= 0:
                customers[id].cur_quantity = None
                answer = '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í—ã –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?'
                await bot.send_message(id, answer)
            elif inventory >= customers[id].cur_quantity:
                price = df_product['price'].tolist()[0]
                customers[id].shopping_cart.append([customers[id].cur_product, price, customers[id].cur_quantity, price * customers[id].cur_quantity])
                df.loc[idx, 'inventory'] = inventory - customers[id].cur_quantity
                answer = '–•–æ—Ä–æ—à–æ. –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?'
                customers[id].cur_product = None
                customers[id].cur_quantity = None
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                buttons = ['–ú—è—Å–æ', '–û–≤–æ—â–∏', '–§—Ä—É–∫—Ç—ã', '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é', '–û—Ç–º–µ–Ω–∏—Ç—å']
                keyboard.add(*buttons)
                await bot.send_message(id, answer, reply_markup=keyboard)
                await BotStates.buying_state.set()
            else:
                customers[id].cur_quantity = None
                answer = f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ, –≤—Å–µ–≥–æ {inventory} –∫–≥ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –í—ã –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?'
                await bot.send_message(id, answer)
    else:
        answer = '–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.'
        await bot.send_message(id, answer)

@dp.message_handler(state=BotStates.confirm_state)
async def confirm(message: types.Message):
    text = lemmatizing(message.text)
    id = message.from_user.id
    global df
    product = None
    for word in text:
        if word in df['name'].values:
            product = word
            break
        elif stemmer.stem(word) in stem_products:
            product = stem_products[stemmer.stem(word)]
            break
    if product != None:
        deleted = False
        for item in customers[id].shopping_cart[:]:
            if item[0] == product:
                df_product = df[df['name'] == item[0]]
                inventory = df_product['inventory'].tolist()[0]
                idx = df_product.index[0]
                df.loc[idx, 'inventory'] = inventory + item[2]
                customers[id].shopping_cart.remove(item)
                deleted = True
        if len(customers[id].shopping_cart) == 0:
            answer = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä.'
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ['–ú—è—Å–æ', '–û–≤–æ—â–∏', '–§—Ä—É–∫—Ç—ã', '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é', '–û—Ç–º–µ–Ω–∏—Ç—å']
            keyboard.add(*buttons)
            await bot.send_message(id, answer, reply_markup=keyboard)
            await BotStates.buying_state.set()
            return
        if deleted:
            answer = f'–¢–æ–≤–∞—Ä "{product}" —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.\n'
            answer += get_shopping_cart(id)
            answer += '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?'
            await bot.send_message(id, answer)
            return
        else:
            answer = f'–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞ "{product}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.'
            await bot.send_message(id, answer)
            return
    if '–Ω–µ—Ç' in text or '—É–¥–∞–ª–∏—Ç—å' in text or '—É–¥–∞–ª—è—Ç—å' in text or '–Ω–µ' in text:
        answer = '–•–æ—Ä–æ—à–æ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?'
        await bot.send_message(id, answer)
    elif '–¥–∞' in text or '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å' in text:
        answer = '–í–∞–º –Ω—É–∂–µ–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞?'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–°–∞–º–æ–≤—ã–≤–æ–∑', '–î–æ—Å—Ç–∞–≤–∫–∞']
        keyboard.add(*buttons)
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.choosing_state.set()
    elif '–Ω–∞–∑–∞–¥' in text:
        answer = '–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏.'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–ú—è—Å–æ', '–û–≤–æ—â–∏', '–§—Ä—É–∫—Ç—ã', '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é', '–û—Ç–º–µ–Ω–∏—Ç—å']
        keyboard.add(*buttons)
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.buying_state.set()
    else:
        answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.'
        await bot.send_message(id, answer)

def get_order_number():
    res = ''
    for i in range(8):
        res += str(random.randint(0, 9))
    if not res in [order[0] for order in orders]:
        return res
    else:
        return get_order_number()

@dp.message_handler(state=BotStates.choosing_state)
async def choose(message: types.Message):
    text = lemmatizing(message.text)
    id = message.from_user.id
    global orders
    if '—Å–∞–º–æ–≤—ã–≤–æ–∑' in text:
        order_number = get_order_number()
        orders.append([order_number, None, None, None, customers[id].shopping_cart])
        customers[id].shopping_cart = []
        answer = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–∫—É–ø–∫—Éüòäüòäüòä –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –∏–∑ –Ω–∞—à–µ–≥–æ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç. –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–Ω–æ–≤–∞! –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏.'
        keyboard = types.ReplyKeyboardRemove()
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.end_state.set()
    elif '–¥–æ—Å—Ç–∞–≤–∫–∞' in text:
        answer = '–•–æ—Ä–æ—à–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'
        keyboard = types.ReplyKeyboardRemove()
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.waiting_for_name_state.set()
    else:
        answer = '–Ø –Ω–µ –∑–Ω–∞—é, –æ —á–µ–º –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ.'
        await bot.send_message(id, answer)

@dp.message_handler(state=BotStates.waiting_for_name_state)
async def get_name(message: types.Message):
    id = message.from_user.id
    customers[id].name = message.text
    answer = '–ö–∞–∫–æ–π —É –≤–∞—Å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?'
    await bot.send_message(id, answer)
    await BotStates.waiting_for_telephone_state.set()

@dp.message_handler(state=BotStates.waiting_for_telephone_state)
async def get_telephone(message: types.Message):
    id = message.from_user.id
    customers[id].telephone = message.text
    answer = '–ö–∞–∫–æ–π —É –≤–∞—Å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏?'
    await bot.send_message(id, answer)
    await BotStates.waiting_for_address_state.set()

@dp.message_handler(state=BotStates.waiting_for_address_state)
async def get_address(message: types.Message):
    id = message.from_user.id
    customers[id].address = message.text
    answer = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ:\n'
    answer += f'–§–ò–û: {customers[id].name}\n'
    answer += f'–¢–µ–ª–µ—Ñ–æ–Ω: {customers[id].telephone}\n'
    answer += f'–ê–¥—Ä–µ—Å: {customers[id].address}\n'
    answer += get_shopping_cart(id)
    answer += '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–î–∞', '–ù–µ—Ç']
    keyboard.add(*buttons)
    await bot.send_message(id, answer, reply_markup=keyboard)
    await BotStates.second_confirm_state.set()

@dp.message_handler(state=BotStates.second_confirm_state)
async def confirm(message: types.Message):
    text = lemmatizing(message.text)
    id = message.from_user.id
    global orders
    if '–Ω–µ—Ç' in text or '–Ω–µ' in text:
        customers[id].name = None
        customers[id].telephone = None
        customers[id].address = None
        answer = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'
        keyboard = types.ReplyKeyboardRemove()
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.waiting_for_name_state.set()
    elif '–¥–∞' in text or '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å' in text:
        order_number = get_order_number()
        orders.append([order_number, customers[id].name, customers[id].telephone, customers[id].address, customers[id].shopping_cart])
        customers[id].name = None
        customers[id].telephone = None
        customers[id].address = None
        customers[id].shopping_cart = []
        answer = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–∫—É–ø–∫—Éüòäüòäüòä –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}. –¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–Ω–æ–≤–∞! –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏.'
        keyboard = types.ReplyKeyboardRemove()
        await bot.send_message(id, answer, reply_markup=keyboard)
        await BotStates.end_state.set()
    else:
        answer = '–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å.'
        await bot.send_message(id, answer)

timer = None

def refresh_product():
    global df
    inventory = [30] * 13 + [20] * 12
    df['inventory'] = inventory
    loop_refresh()

def loop_refresh():
    global timer
    timer = Timer(86400, refresh_product)
    timer.start()


if __name__ == "__main__":
    loop_refresh()
    executor.start_polling(dp)
    timer.cancel()
